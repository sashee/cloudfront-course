AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  # the backend and the frontend codes
  Code:
    Frontend:
      owner: khaledosman
      repo: react-redux-realworld-example-app
      tag: e9e398f1525ea31f688661dd11aaeab13efd26ca
    Backend:
      owner: sashee
      repo: express-bookshelf-realworld-example-app
      tag: f1c5a5715e422f6c3a6379f11e0f2089ca640ac2
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  # allow port 3000 (the port the backend uses)
  InboundBackendHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 150
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 3000
        To: 3000
  # allow port 80
  InboundHTTPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
# allow port 22 to SSH into the instance
# only useful for debugging, so it's commented out
#  InboundSSHNetworkAclEntry:
#    Type: AWS::EC2::NetworkAclEntry
#    Properties:
#      NetworkAclId: !Ref NetworkAcl
#      RuleNumber: 200
#      Protocol: 6
#      RuleAction: allow
#      Egress: false
#      CidrBlock: 0.0.0.0/0
#      PortRange:
#        From: 22
#        To: 22
  # allow ephemeral ports for responses
  InBoundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 300
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  # allow all outbound traffic
  OutBoundNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 400
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable HTTP via port 3000
      SecurityGroupIngress:
      # backend
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      # frontend
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # ssh, only for debugging
#      - IpProtocol: tcp
#        FromPort: 22
#        ToPort: 22
#        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      # allow all outbound
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          setup:
            - add_nodejs_repo
            - install_nodejs
            - install_docker
            - install_frontend
            - install_backend
            - seed_db
        add_nodejs_repo:
          commands:
            add_repo:
              command: |
                curl -sL https://rpm.nodesource.com/setup_14.x | bash -
        install_nodejs:
          packages:
            yum:
              nodejs: []
              "gcc-c++": []
              make: []
        install_docker:
          packages:
            yum:
              docker: []
          commands:
            01_install_docker_compose:
              command: curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose && ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
              test: docker-compose --version >/dev/null 2>&1; (( $? != 0 ))
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        install_frontend:
          packages:
            yum:
              httpd: []
          files:
            "/etc/httpd/conf.modules.d/11-proxy-backend.conf":
              content: |
                ProxyPass "/api"  "http://localhost:3000/api"
              mode: 000644
              owner: root
              group: root
          sources:
            "/opt/frontend": !Sub
              - https://github.com/${owner}/${repo}/archive/${tag}.zip
              - owner: !FindInMap [Code, Frontend, owner]
                repo: !FindInMap [Code, Frontend, repo]
                tag: !FindInMap [Code, Frontend, tag]
          commands:
            01_npm_ci:
              command: npm ci
              cwd: !Sub
                - /opt/frontend/${repo}-${tag}
                - repo: !FindInMap [Code, Frontend, repo]
                  tag: !FindInMap [Code, Frontend, tag]
            02_build:
              command: REACT_APP_BACKEND_URL="/api" npm run build
              cwd: !Sub
                - /opt/frontend/${repo}-${tag}
                - repo: !FindInMap [Code, Frontend, repo]
                  tag: !FindInMap [Code, Frontend, tag]
            03_deploy:
              command: !Sub
                - cp -a /opt/frontend/${repo}-${tag}/build/. /var/www/html
                - repo: !FindInMap [Code, Frontend, repo]
                  tag: !FindInMap [Code, Frontend, tag]
            04_fix_permissions:
              command: chmod -R +r /var/www/html
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
        install_backend:
          sources:
            "/opt/backend": !Sub
              - https://github.com/${owner}/${repo}/archive/${tag}.zip
              - owner: !FindInMap [Code, Backend, owner]
                repo: !FindInMap [Code, Backend, repo]
                tag: !FindInMap [Code, Backend, tag]
          commands:
            01_build:
              command: docker-compose -f docker-compose.yml -f docker-compose.development.yml build
              cwd: !Sub
                - /opt/backend/${repo}-${tag}
                - repo: !FindInMap [Code, Backend, repo]
                  tag: !FindInMap [Code, Backend, tag]
          files:
            "/etc/systemd/system/backend.service":
              content: !Sub
                - |
                  [Unit]
                  Description=backend

                  [Service]
                  WorkingDirectory=/opt/backend/${repo}-${tag}
                  ExecStart=/usr/bin/npm run docker:start

                  [Install]
                  WantedBy=multi-user.target
                - repo: !FindInMap [Code, Backend, repo]
                  tag: !FindInMap [Code, Backend, tag]
              mode: 000644
              owner: root
              group: root
          services:
            sysvinit:
              backend:
                enabled: true
                ensureRunning: true
        seed_db:
          commands:
            01_seed_db:
              command: until docker-compose ps node | tail -1 | awk '{print $5}' | grep Up; do sleep 1; done; docker-compose exec -T node npx knex --knexfile config/knexfile.js seed:run
              cwd: !Sub
                - /opt/backend/${repo}-${tag}
                - repo: !FindInMap [Code, Backend, repo]
                  tag: !FindInMap [Code, Backend, tag]
    Properties:
      InstanceType: "t2.micro"
      ImageId: "ami-047a51fa27710816e"
      # the key to use to ssh into the instance
      # only for debugging
      # KeyName: "test"
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          GroupSet:
          - !Ref SecurityGroup
          SubnetId: !Ref Subnet
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Instance --configsets setup --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: frontend
          DefaultTTL: 60
          MinTTL: 60
          MaxTTL: 60
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          ViewerProtocolPolicy: "redirect-to-https"
        CacheBehaviors:
          - PathPattern: /api/tags
            TargetOriginId: api
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            Compress: true
            DefaultTTL: 60
            MinTTL: 60
            MaxTTL: 60
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: true
          - PathPattern: /api/articles
            TargetOriginId: api
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            Compress: true
            DefaultTTL: 60
            MinTTL: 60
            MaxTTL: 60
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: true
          - PathPattern: /api/*
            TargetOriginId: api
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            Compress: true
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ForwardedValues:
              Cookies:
                Forward: all
              QueryString: true
              Headers:
                - '*'
          - PathPattern: /static/*
            TargetOriginId: frontend
            ViewerProtocolPolicy: https-only
            Compress: true
            DefaultTTL: 31536000
            MinTTL: 31536000
            MaxTTL: 31536000
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
        Origins:
          - Id: frontend
            DomainName: !GetAtt Instance.PublicDnsName
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
          - Id: api
            DomainName: !GetAtt Instance.PublicDnsName
            CustomOriginConfig:
              HTTPPort: 3000
              OriginProtocolPolicy: http-only
Outputs:
  URL:
    Value: !Join ["", ["http://", !GetAtt Instance.PublicDnsName]]
  CloudFrontURL:
    Value: !GetAtt Distribution.DomainName
